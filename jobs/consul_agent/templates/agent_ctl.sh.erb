#!/bin/bash -e
# vim: set ft=sh

<%
  require 'openssl'
  require 'base64'
  def string_to_encrypt_key(string)
    return string if is_already_key?(string)
    Base64.encode64(OpenSSL::PKCS5.pbkdf2_hmac_sha1(string, "", 20000, 16)).strip
  end

  def is_already_key?(string)
    return false unless string.length == 24
    Base64.strict_decode64(string).length == 16
  rescue
    false
  end
%>
set -eux

LOG_DIR=/var/vcap/sys/log/consul_agent
RUN_DIR=/var/vcap/sys/run/consul_agent
DATA_DIR=/var/vcap/store/consul_agent
CONF_DIR=/var/vcap/jobs/consul_agent/config
SCRIPT_DIR=/var/vcap/jobs/consul_agent/bin
CERT_DIR=$CONF_DIR/certs

PKG=/var/vcap/packages/consul

PID_FILE=$RUN_DIR/consul_agent.pid
NODE_NAME='<%="#{name.gsub('_', '-')}-#{spec.index}"%>'

source /var/vcap/packages/consul-common/utils.sh

mkdir -p /var/vcap/sys/log/monit
exec 1>> /var/vcap/sys/log/monit/consul_agent.out.log
exec 2>> /var/vcap/sys/log/monit/consul_agent.err.log

stop_consul() {
  echo "$(date) Consul failed to start"
  local consul_pid=$1
  if ! $PKG/bin/consul leave; then
    kill ${consul_pid} || true
  fi

  wait ${consul_pid}
}

leave_consul() {
  local consul_pid=$1
  if ! $PKG/bin/consul leave; then
    kill ${consul_pid} || true
  fi
  wait ${consul_pid}
}

recreate_data_dir() {
  rm -rf $DATA_DIR
  mkdir -p $DATA_DIR
  chown -R vcap:vcap $DATA_DIR
}

get_leader() {
  for i in $(seq $start <%= p("consul.agent.sync_timeout_in_seconds") %>); do
    status_response_code=$(curl -sL http://127.0.0.1:8500/v1/status/leader -w '%{http_code}' -o /dev/null; exit 0)
    if [ "${status_response_code}" = "200" ]; then
      leader=$(curl -s http://127.0.0.1:8500/v1/status/leader;  exit 0)
      leader="${leader%\"}"
      leader="${leader#\"}"
      if [ "${leader}" != "" ]; then
        echo "${leader}"
        exit 0
      fi
    fi
    sleep 1
  done
}

case $1 in
  start)

    pid_guard ${PID_FILE} "consul_agent"

    mkdir -p $LOG_DIR
    chown -R vcap:vcap $LOG_DIR

    mkdir -p $RUN_DIR
    chown -R vcap:vcap $RUN_DIR

    mkdir -p $DATA_DIR
    chown -R vcap:vcap $DATA_DIR

    <% if p("consul.require_ssl") %>
      chown vcap:vcap ${CERT_DIR}/*.{crt,key}
      chmod 640 ${CERT_DIR}/*.{crt,key}
    <% end %>

    <% p("consul.agent.services").each do |service_name, service| %>
    cat > $CONF_DIR/service-<%= service_name %>.json <<EOF
<%=
{
  "service" => {
    "name" => service_name.tr('_', '-'),
    "check" => {
      "script" => "/var/vcap/jobs/#{service_name}/bin/dns_health_check",
      "interval" => "3s"
    },
    "tags" => ["#{name.gsub('_', '-')}-#{spec.index}"]
  }.merge(service)
}.to_json
%>
EOF
    <% end %>

    # "Consul uses a significant amount of virtual memory, since LMDB uses
    # mmap() underneath. It uses about 700MB of a 32bit system and 40GB on a
    # 64bit system."
    #
    # this mainly applies to bosh-lite
    ulimit -v unlimited
    ulimit -n 4096

    # add consul agent's dns to resolv.conf
    #
    # /etc/resolv.conf will probably be regenerated all the time, so add the
    # local dns server to /head, which will be prepended when regenerated.
    echo 'nameserver 127.0.0.1' > /etc/resolvconf/resolv.conf.d/head

    if resolvconf --updates-are-enabled; then
      resolvconf -u
    else
      # updates are disabled in bosh-lite; in this case just add to
      # /etc/resolv.conf directly.
      #
      # enabling updates and then updating it with resolvconf -u seems to add
      # dns entries from where the box was generated.
      if ! grep -q 127.0.0.1 /etc/resolv.conf; then
        sed -i -e '1i nameserver 127.0.0.1' /etc/resolv.conf
      fi
    fi

    expected=<%=p("consul.agent.servers.lan").size%>
    consul_join="<%=p("consul.agent.servers.lan").join(' ')%>"
    server=<%=p("consul.agent.mode") == "server"%>

    setcap cap_net_bind_service=+ep $PKG/bin/consul

    GOMAXPROCS=$(nproc)
    if [ "$GOMAXPROCS" = "1" ]; then
      GOMAXPROCS=2
    fi

    export GOMAXPROCS

    if [ "$server" != "true" ]; then
      rm -f $DATA_DIR/serf/local.keyring
    fi

    if [ "$server" == true ]; then

      echo "STARTING AGENT CLIENT!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
      echo "Cut peers $(cat ${DATA_DIR}/raft/peers.json; exit 0)"
      echo "Rm data $(rm $DATA_DIR/raft/peers.json; exit 0)"

      chpst -u vcap:vcap $PKG/bin/consul agent \
        -config-dir=$CONF_DIR \
        <% p("consul.agent.servers.lan").each do |server| %> \
          -join <%= server %> \
        <% end %> \
        2> >(tee -a ${LOG_DIR}/consul_agent.stderr.log | logger -p user.error -t vcap.consul-agent) \
        1> >(tee -a ${LOG_DIR}/consul_agent.stdout.log | logger -p user.info  -t vcap.consul-agent) &

      client_pid=$!

      sleep 5

      # attempt to connect to cluster
      start=1
      leader_is_found=false

      echo "LETS SEE SOME MEBERS!!"
      echo "$(${PKG}/bin/consul members)"

      for i in $(seq $start <%= p("consul.agent.sync_timeout_in_seconds") %>); do
        status_response_code=$(curl -sL http://127.0.0.1:8500/v1/status/leader -w '%{http_code}' -o /dev/null; exit 0)
        if [ "${status_response_code}" = "200" ]; then
          leader=$(curl -s http://127.0.0.1:8500/v1/status/leader;  exit 0)
          leader="${leader%\"}"
          leader="${leader#\"}"
          echo "LALALA leader: ${leader}"
          echo "LETS SEE SOME MEBERS AGAIN!!"
          echo "$(${PKG}/bin/consul members)"
          if [ "${leader}" == "" ]; then
            echo "$(date) No leader found. Retrying..."
          else
            leader_is_found=true
            break
          fi
        fi
        sleep 1
      done

      echo "LEAVING AGENT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
      leave_consul $client_pid
      echo "Left consul"

      if ${leader_is_found}; then
         chpst -u vcap:vcap $PKG/bin/consul agent \
           -server \
           -config-dir=$CONF_DIR \
           -retry-join "${leader}" \
           2> >(tee -a ${LOG_DIR}/consul_agent.stderr.log | logger -p user.error -t vcap.consul-agent) \
           1> >(tee -a ${LOG_DIR}/consul_agent.stdout.log | logger -p user.info  -t vcap.consul-agent) &

      # otherwise start in bootstrap 1
      else
        chpst -u vcap:vcap $PKG/bin/consul agent \
           -server \
           -bootstrap-expect 1 \
           -config-dir=$CONF_DIR \
           2> >(tee -a ${LOG_DIR}/consul_agent.stderr.log | logger -p user.error -t vcap.consul-agent) \
           1> >(tee -a ${LOG_DIR}/consul_agent.stdout.log | logger -p user.info  -t vcap.consul-agent) &
      fi

      consul_pid=$!

      echo "SERVER STARTED !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! sleaping before getting the leader"

      leader="$(get_leader)"
#it looks like leader is cached.

      echo "LEADER ISSSSSSS ${leader}"

      synced=false
      if [ "${leader}" != "" ]; then
        for i in $(seq $start <%= p("consul.agent.sync_timeout_in_seconds") %>); do
          info=$($PKG/bin/consul info; exit 0)
          commit_index=$(echo $info | grep -o "commit_index = [0-9]\+" | cut -d "=" -f2 | tr -d " ")
          last_log_index=$(echo $info | grep -o "last_log_index = [0-9]\+" | cut -d "=" -f2 | tr -d " ")
          echo "commit_index: ${commit_index}"
          echo "last_log_index: ${last_log_index}"
          if [[ $commit_index -ne 0 && $last_log_index -eq $commit_index ]]; then
            synced=true
            break
          fi
          sleep 1
        done
      fi

      if ${synced}; then
        echo "$(date) Consul is synced !!!!!!!!!!!!!!!!!!! starting KILLER"
        chpst -u vcap:vcap ${SCRIPT_DIR}/consul_killer &

        <% if p("consul.require_ssl") %>
          <% if !p("consul.encrypt_keys").nil? && !p("consul.encrypt_keys").empty? %>
              allkeys=$($PKG/bin/consul keyring -list | grep -oP '[^\s]{24}' | sort -u | awk '{ print $1 }')
              extrakeys=$(echo $allkeys | xargs -n1 | grep -v '<%= p("consul.encrypt_keys").collect{|key| string_to_encrypt_key(key) }.join('\\|') %>' | cat)
              <% p("consul.encrypt_keys").each do |encrypt_key| %>
                $PKG/bin/consul keyring -install='<%= string_to_encrypt_key(encrypt_key) %>'
              <% end %>
              $PKG/bin/consul keyring -use='<%= string_to_encrypt_key(p("consul.encrypt_keys").first) %>'
              for toremove in $extrakeys ; do
                $PKG/bin/consul keyring -remove="$toremove"
              done
          <% end %>
        <% end %>
      else
        echo "$(date) Consul failed to sync"
        stop_consul $consul_pid
        echo "Decided to delete data directory since not the only cluster member"
        rm -rf ${DATA_DIR}
        exit 1
      fi
    #run client
    else
      chpst -u vcap:vcap $PKG/bin/consul agent \
        -config-dir=$CONF_DIR \
        <% p("consul.agent.servers.lan").each do |server| %>
        -join <%= server %> \
        <% end %>
        2> >(tee -a ${LOG_DIR}/consul_agent.stderr.log | logger -p user.error -t vcap.consul-agent) \
        1> >(tee -a ${LOG_DIR}/consul_agent.stdout.log | logger -p user.info  -t vcap.consul-agent) &

        client_pid=$!

        #check if it connects
        status_response_code=$(curl -sL http://127.0.0.1:8500/v1/status/leader -w %{http_code} -o /dev/null)
        if [ "$status_response_code" == "200" ]; then
          leader=$(curl -s http://127.0.0.1:8500/v1/status/leader)
          if [ "$leader" == '""' ]; then
            echo "$(date) No leader found"
            leader_is_found=false
          else
            leader_is_found=true
          fi
        fi

        if ${leader_is_found}; then
          echo "Connected to leader ${leader}"
        else #if it fails to connect
          kill client_pid
          recreate_data_dir
          chpst -u vcap:vcap $PKG/bin/consul agent \
            -config-dir=$CONF_DIR \
            <% p("consul.agent.servers.lan").each do |server| %>
            -join <%= server %> \
            <% end %>
            2> >(tee -a ${LOG_DIR}/consul_agent.stderr.log | logger -p user.error -t vcap.consul-agent) \
            1> >(tee -a ${LOG_DIR}/consul_agent.stdout.log | logger -p user.info  -t vcap.consul-agent) &

          client_pid=$!
          status_response_code=$(curl -sL http://127.0.0.1:8500/v1/status/leader -w %{http_code} -o /dev/null)
          if [ "$status_response_code" == "200" ]; then
            leader=$(curl -s http://127.0.0.1:8500/v1/status/leader)
            if [ "$leader" == '""' ]; then
              echo "$(date) No leader found"
              exit 1
            else
              echo "Connected to leader ${leader}"
            fi
          fi
        fi
    fi
    echo ${consul_pid} > $PID_FILE
    ;;

  stop)
    consul_pid=`head -1 $PID_FILE`
    stop_consul $consul_pid
    ;;

  *)
    echo "Usage: $0 {start|stop}"
    ;;
esac
